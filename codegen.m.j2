%{
  MATLAB Bindings Generated by codegen_create_matlab.py
  
  To use these bindings:
  1. Save this output as a single .m file (e.g., 'loadMyXml.m').
  2. Place the helper functions at the end of the file or in separate files on the MATLAB path.
  3. Run the main function.

  Example Usage:
  >> data = loadMyXml('file.xml');
  >> first_entity_btag = data.entities(1).btag;
  >> disp(first_entity_btag.value1);
%}

function fileData = loadMyXml(filepath)
    % Main function to parse the XML and wrap it in MATLAB objects.
    xDoc = xmlread(filepath);
    rootElement = xDoc.getDocumentElement();
    
    % Load Entities
    entityNodes = findNodes(rootElement, 'entitytag');
    fileData.entities = [];
    for i = 1:length(entityNodes)
        fileData.entities = [fileData.entities, Entity(entityNodes(i))];
    end

    % Load other root components
    {% for component in components %}
    {% if component.tag_name != 'entitytag' %}
    root_{{component.tag_name}} = findNodes(rootElement, '{{component.tag_name}}');
    if ~isempty(root_{{component.tag_name}})
        fileData.{{component.tag_name}} = {{component.class_name}}(root_{{component.tag_name}}(1));
    end
    {% endif %}
    {% endfor %}
end

{% for component in components %}
classdef {{ component.class_name }}
    % Represents the <{{ component.tag_name }}> component.

    properties
        {% for member in component.simple_members %}
        {{ member.prop_name }}
        {% endfor %}
        {% for sub in component.sub_components %}
        {{ sub.prop_name }}
        {% endfor %}
    end

    methods
        function obj = {{ component.class_name }}(xmlNode)
            if nargin > 0
                {% for member in component.simple_members %}
                obj.{{ member.prop_name }} = {{ member.matlab_caster }}(getNodeText(xmlNode, '{{ member.tag_name }}'));
                {% endfor %}
                {% for sub in component.sub_components %}
                subNode = findNodes(xmlNode, '{{ sub.tag_name }}');
                if ~isempty(subNode)
                    obj.{{ sub.prop_name }} = {{ sub.class_name }}(subNode(1));
                end
                {% endfor %}
            end
        end
    end
end

{% endfor %}

classdef Entity
    % Represents an <entitytag> and provides dynamic access to its children.
    properties
        Children
    end
    methods
        function obj = Entity(xmlNode)
            obj.Children = struct();
            childNodes = xmlNode.getChildNodes();
            for i = 0:childNodes.getLength()-1
                child = childNodes.item(i);
                if child.getNodeType() == 1 % ELEMENT_NODE
                    tagName = char(child.getTagName());
                    % Check if it's a known component class
                    if ismember(tagName, {{ component_names }})
                        className = [upper(tagName(1)), lower(tagName(2:end))];
                        obj.Children.(tagName) = feval(className, child);
                    else % It's a simple value
                        obj.Children.(tagName) = char(child.getTextContent());
                    end
                end
            end
        end
        
        function varargout = subsref(obj, s)
            % Override dot notation to access children directly.
            if strcmp(s(1).type, '.')
                [varargout{1:nargout}] = obj.Children.(s(1).subs);
            else
                [varargout{1:nargout}] = builtin('subsref', obj, s);
            end
        end
    end
end


% --- XML Helper Functions ---
function text = getNodeText(parentNode, nodeName)
    nodeList = findNodes(parentNode, nodeName);
    if ~isempty(nodeList) && nodeList(1).hasChildNodes()
        text = char(nodeList(1).getFirstChild().getNodeValue());
    else
        text = ''; % Return empty char array if not found
    end
end

function nodes = findNodes(parentNode, nodeName)
    nodeList = parentNode.getElementsByTagName(nodeName);
    nodes = [];
    for i = 0:nodeList.getLength()-1
        nodes = [nodes, nodeList.item(i)];
    end
end
